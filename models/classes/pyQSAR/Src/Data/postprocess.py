'''
Post processing for trained models

DESCRIPTION
    This module holds functions for performing post processing on data.
'''

# Imports
import numpy as np
import matplotlib.pyplot as plt
import sklearn.decomposition as skd
import scipy.stats as scistat

# Functions
def plot_Residual(x,y):
    '''
    Plot residuals.

    INPUT
        x: (numpy array) Data for horizontal axis.

        y: (numpy array) Data for vertical axis.

    OUTPUT
        residuals: (numpy array) Array of residuals.
    '''

    # Variables
    residuals = y-x
    xmin,xmax = (min(x),max(x))

    # Plot residuals
    print('Plotting residuals...')
    plt.scatter(x,residuals)
    plt.plot(np.linspace(xmin,xmax,3),np.zeros(3),lw=3,color='k',ls='--')
    plt.show()

    return residuals

def pca_shift_init(train_measured,train_pred,plot=False):
    '''
    Initialize by calculating PCA shift parameters from training data.

    INPUT
        train_measured: (numpy array) Measured training data.

        train_pred: (numpy array) Predicted training data.

        plot: (Boolean) Switch for plotting fits.

    OUTPUT
        outParams: (list) List of [pca slope, pca means (x,y)].
    '''

    # Create matrix from data
    XVals = np.matrix([train_pred,train_measured]).T

    # Get data boundaries
    xmin,xmax = (min(XVals[:,0])[0,0],max(XVals[:,0])[0,0])
    xComp = np.linspace(xmin,xmax,30)

    # Calculate PCA
    pca = skd.PCA(n_components=1)
    pca.fit(XVals)
    pcaVals = pca.components_
    slope = pcaVals[0,1]/pcaVals[0,0]

    # Plotting PCA line within model
    if (plot):
        # Calculate PCA line
        pcaLine = (slope*(xComp-pca.mean_[0])+pca.mean_[1])

        # Plot PCA line
        plt.scatter(train_pred,train_measured)
        plt.plot(xComp,pcaLine,lw=3,ls='--',c='k')
        plt.plot(xComp,xComp,lw=2,c='g')
        plt.show()

    # Gather output parameters
    outParams = [slope,pca.mean_]

    return outParams

def pca_shift_calc(test_measured,test_pred,pcaParams,plot=False):
    '''
    Use PCA shift parameters to perform shift.

    INPUT
        test_measured: (numpy array) Measured testing data.

        test_pred: (numpy array) Predicted testing data.

        pcaParams: (list) PCA parameters generated by pca_shift_init.

        plot: (Boolean) Switch for plotting fits.

    OUTPUT
        y_shift_test_pred: (list of floats) List of shifted prediction values.

        r_value_t: (float) r-value of shifted fit.
    '''

    # Variables
    y_shift_test_pred = []
    slope = pcaParams[0]
    mean_x = pcaParams[1][0]
    mean_y = pcaParams[1][1]

    # Shift testing data
    for index,y_measured in enumerate(test_measured):
        x_2 = (1.0/slope)*(y_measured-mean_y)+mean_x
        x_shift = y_measured-x_2
        y_shift_test_pred.append(test_pred[index]+x_shift)

    # Get statistics
    slope_t, intercept_t, r_value_t, p_value_t, std_err_t = scistat.linregress(y_shift_test_pred,test_measured)

    # Notify user of how well shifted fit is
    print('Shifted Testing r^2 = ' + str(r_value_t**2))

    # Plot shifted data
    if (plot):
        xmin = min(y_shift_test_pred)
        xmax = max(y_shift_test_pred)
        xComp = np.linspace(xmin,xmax,30)

        plt.scatter(y_shift_test_pred,test_measured)
        plt.plot(xComp,xComp,lw=2,c='k',ls='--')

        plt.show()

    return y_shift_test_pred,r_value_t

# Main
if (__name__ == '__main__'):
    pass
